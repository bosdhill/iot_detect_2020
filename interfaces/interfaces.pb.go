// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.13.0
// source: interfaces.proto

package interfaces

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Flags enum provides for the bitwise field flags
type EventFilter_Flags int32

const (
	// Dummy flag
	EventFilter_FLAGS_UNSPECIFIED EventFilter_Flags = 0
	// Return only metadata
	EventFilter_METADATA EventFilter_Flags = 1
	// Return bounding boxes
	EventFilter_BOXES EventFilter_Flags = 2
	// Return jpg image
	EventFilter_IMAGE EventFilter_Flags = 4
	// Return annotated jpg image image
	EventFilter_ANNOTATED EventFilter_Flags = 8
	// Return confidence
	EventFilter_CONFIDENCE EventFilter_Flags = 16
)

// Enum value maps for EventFilter_Flags.
var (
	EventFilter_Flags_name = map[int32]string{
		0:  "FLAGS_UNSPECIFIED",
		1:  "METADATA",
		2:  "BOXES",
		4:  "IMAGE",
		8:  "ANNOTATED",
		16: "CONFIDENCE",
	}
	EventFilter_Flags_value = map[string]int32{
		"FLAGS_UNSPECIFIED": 0,
		"METADATA":          1,
		"BOXES":             2,
		"IMAGE":             4,
		"ANNOTATED":         8,
		"CONFIDENCE":        16,
	}
)

func (x EventFilter_Flags) Enum() *EventFilter_Flags {
	p := new(EventFilter_Flags)
	*p = x
	return p
}

func (x EventFilter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventFilter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_interfaces_proto_enumTypes[0].Descriptor()
}

func (EventFilter_Flags) Type() protoreflect.EnumType {
	return &file_interfaces_proto_enumTypes[0]
}

func (x EventFilter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventFilter_Flags.Descriptor instead.
func (EventFilter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{4, 0}
}

// Image is a gocv.Mat representation of an image frame
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Rows  int32  `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols  int32  `protobuf:"varint,3,opt,name=cols,proto3" json:"cols,omitempty"`
	Type  int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Image) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *Image) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *Image) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// ImageResponse is a message that has a boolean that tells whether upload was successful
type ImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ImageResponse) Reset() {
	*x = ImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageResponse) ProtoMessage() {}

func (x *ImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageResponse.ProtoReflect.Descriptor instead.
func (*ImageResponse) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{1}
}

func (x *ImageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Labels are the labels detected by the object detection model on the Edge
type Labels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]bool `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Labels) Reset() {
	*x = Labels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Labels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Labels) ProtoMessage() {}

func (x *Labels) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Labels.ProtoReflect.Descriptor instead.
func (*Labels) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{2}
}

func (x *Labels) GetLabels() map[string]bool {
	if x != nil {
		return x.Labels
	}
	return nil
}

// EventFilters is an array of EventFilter
type EventFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventFilters []*EventFilter `protobuf:"bytes,1,rep,name=event_filters,json=eventFilters,proto3" json:"event_filters,omitempty"`
}

func (x *EventFilters) Reset() {
	*x = EventFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFilters) ProtoMessage() {}

func (x *EventFilters) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFilters.ProtoReflect.Descriptor instead.
func (*EventFilters) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{3}
}

func (x *EventFilters) GetEventFilters() []*EventFilter {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

// EventFilter is used in both real time event filtration and historic queries. It provides the marshalled bson
// object to be used for real time event filtration and for mongodb in historic queries, as well as flags to determine
// the exact fields to be set and returned.
type EventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by detection results detected in the last n seconds. This is field is ignored in real time event
	// filtration.
	TimeFilter int64 `protobuf:"varint,1,opt,name=time_filter,json=timeFilter,proto3" json:"time_filter,omitempty"`
	// The name of the event, which is used when returning the event to the application. This field is ignored in query
	// event filtration.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// MongoDB bson query
	Filter []byte `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// flags determine the granularity of data returned in an Action
	Flags uint32 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *EventFilter) Reset() {
	*x = EventFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFilter) ProtoMessage() {}

func (x *EventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFilter.ProtoReflect.Descriptor instead.
func (*EventFilter) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{4}
}

func (x *EventFilter) GetTimeFilter() int64 {
	if x != nil {
		return x.TimeFilter
	}
	return 0
}

func (x *EventFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventFilter) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EventFilter) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Event message corresponds to the detection of an Event with an EventFilter
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of this event, which is determined by the EventFilter
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Metadata
	DetectionResult *DetectionResult `protobuf:"bytes,2,opt,name=detection_result,json=detectionResult,proto3" json:"detection_result,omitempty"`
	// annotated_img is the img annotated with bounding boxes
	AnnotatedImg []byte `protobuf:"bytes,3,opt,name=annotated_img,json=annotatedImg,proto3" json:"annotated_img,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{5}
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetDetectionResult() *DetectionResult {
	if x != nil {
		return x.DetectionResult
	}
	return nil
}

func (x *Event) GetAnnotatedImg() []byte {
	if x != nil {
		return x.AnnotatedImg
	}
	return nil
}

// DetectionResult represents the result of the object detection model
type DetectionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the result has any objects
	Empty bool `protobuf:"varint,1,opt,name=empty,proto3" json:"empty,omitempty"`
	// The time of detection
	DetectionTime int64 `protobuf:"varint,2,opt,name=detection_time,json=detectionTime,proto3" json:"detection_time,omitempty"`
	// A map of labels to number detected
	LabelNumber map[string]int32 `protobuf:"bytes,3,rep,name=label_number,json=labelNumber,proto3" json:"label_number,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// A list of labels
	Labels []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	// The matrix representation of the image frame
	Img *Image `protobuf:"bytes,5,opt,name=img,proto3" json:"img,omitempty"`
	// A map from label to its bounding box
	LabelBoxes map[string]*BoundingBoxes `protobuf:"bytes,6,rep,name=label_boxes,json=labelBoxes,proto3" json:"label_boxes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DetectionResult) Reset() {
	*x = DetectionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionResult) ProtoMessage() {}

func (x *DetectionResult) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionResult.ProtoReflect.Descriptor instead.
func (*DetectionResult) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{6}
}

func (x *DetectionResult) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

func (x *DetectionResult) GetDetectionTime() int64 {
	if x != nil {
		return x.DetectionTime
	}
	return 0
}

func (x *DetectionResult) GetLabelNumber() map[string]int32 {
	if x != nil {
		return x.LabelNumber
	}
	return nil
}

func (x *DetectionResult) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DetectionResult) GetImg() *Image {
	if x != nil {
		return x.Img
	}
	return nil
}

func (x *DetectionResult) GetLabelBoxes() map[string]*BoundingBoxes {
	if x != nil {
		return x.LabelBoxes
	}
	return nil
}

type BoundingBoxes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelBoxes []*BoundingBox `protobuf:"bytes,1,rep,name=label_boxes,json=labelBoxes,proto3" json:"label_boxes,omitempty"`
}

func (x *BoundingBoxes) Reset() {
	*x = BoundingBoxes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingBoxes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBoxes) ProtoMessage() {}

func (x *BoundingBoxes) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBoxes.ProtoReflect.Descriptor instead.
func (*BoundingBoxes) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{7}
}

func (x *BoundingBoxes) GetLabelBoxes() []*BoundingBox {
	if x != nil {
		return x.LabelBoxes
	}
	return nil
}

// BoundingBox message is the representation of the bounding box output by the object detection component as well as its
// confidence
type BoundingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopLeftX     int32   `protobuf:"varint,1,opt,name=top_left_x,json=topLeftX,proto3" json:"top_left_x,omitempty"`
	TopLeftY     int32   `protobuf:"varint,2,opt,name=top_left_y,json=topLeftY,proto3" json:"top_left_y,omitempty"`
	BottomRightX int32   `protobuf:"varint,3,opt,name=bottom_right_x,json=bottomRightX,proto3" json:"bottom_right_x,omitempty"`
	BottomRightY int32   `protobuf:"varint,4,opt,name=bottom_right_y,json=bottomRightY,proto3" json:"bottom_right_y,omitempty"`
	Confidence   float32 `protobuf:"fixed32,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *BoundingBox) Reset() {
	*x = BoundingBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBox) ProtoMessage() {}

func (x *BoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBox.ProtoReflect.Descriptor instead.
func (*BoundingBox) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{8}
}

func (x *BoundingBox) GetTopLeftX() int32 {
	if x != nil {
		return x.TopLeftX
	}
	return 0
}

func (x *BoundingBox) GetTopLeftY() int32 {
	if x != nil {
		return x.TopLeftY
	}
	return 0
}

func (x *BoundingBox) GetBottomRightX() int32 {
	if x != nil {
		return x.BottomRightX
	}
	return 0
}

func (x *BoundingBox) GetBottomRightY() int32 {
	if x != nil {
		return x.BottomRightY
	}
	return 0
}

func (x *BoundingBox) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

var File_interfaces_proto protoreflect.FileDescriptor

var file_interfaces_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x59, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a,
	0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x0c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd3,
	0x01, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x61, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4c,
	0x41, 0x47, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x4f, 0x58, 0x45, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x10, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x6d, 0x67, 0x22, 0xd8, 0x03, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x51, 0x0a,
	0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x6f, 0x78, 0x65, 0x73,
	0x1a, 0x3e, 0x0a, 0x10, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x5d, 0x0a, 0x0f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x6f, 0x78, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x4e, 0x0a, 0x0d, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x65, 0x73,
	0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x6f, 0x78, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x22,
	0xb5, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12,
	0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x58, 0x12, 0x1c, 0x0a,
	0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x59, 0x12, 0x24, 0x0a, 0x0e, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x58, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x59, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x32, 0x55, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x32, 0xe4,
	0x01, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x12, 0x50, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x28, 0x01, 0x32, 0x94, 0x01, 0x0a, 0x09, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0e, 0x5a, 0x0c,
	0x2e, 0x3b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interfaces_proto_rawDescOnce sync.Once
	file_interfaces_proto_rawDescData = file_interfaces_proto_rawDesc
)

func file_interfaces_proto_rawDescGZIP() []byte {
	file_interfaces_proto_rawDescOnce.Do(func() {
		file_interfaces_proto_rawDescData = protoimpl.X.CompressGZIP(file_interfaces_proto_rawDescData)
	})
	return file_interfaces_proto_rawDescData
}

var file_interfaces_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_interfaces_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_interfaces_proto_goTypes = []interface{}{
	(EventFilter_Flags)(0),  // 0: google.protobuf.EventFilter.Flags
	(*Image)(nil),           // 1: google.protobuf.Image
	(*ImageResponse)(nil),   // 2: google.protobuf.ImageResponse
	(*Labels)(nil),          // 3: google.protobuf.Labels
	(*EventFilters)(nil),    // 4: google.protobuf.EventFilters
	(*EventFilter)(nil),     // 5: google.protobuf.EventFilter
	(*Event)(nil),           // 6: google.protobuf.Event
	(*DetectionResult)(nil), // 7: google.protobuf.DetectionResult
	(*BoundingBoxes)(nil),   // 8: google.protobuf.BoundingBoxes
	(*BoundingBox)(nil),     // 9: google.protobuf.BoundingBox
	nil,                     // 10: google.protobuf.Labels.LabelsEntry
	nil,                     // 11: google.protobuf.DetectionResult.LabelNumberEntry
	nil,                     // 12: google.protobuf.DetectionResult.LabelBoxesEntry
	(*empty.Empty)(nil),     // 13: google.protobuf.Empty
}
var file_interfaces_proto_depIdxs = []int32{
	10, // 0: google.protobuf.Labels.labels:type_name -> google.protobuf.Labels.LabelsEntry
	5,  // 1: google.protobuf.EventFilters.event_filters:type_name -> google.protobuf.EventFilter
	7,  // 2: google.protobuf.Event.detection_result:type_name -> google.protobuf.DetectionResult
	11, // 3: google.protobuf.DetectionResult.label_number:type_name -> google.protobuf.DetectionResult.LabelNumberEntry
	1,  // 4: google.protobuf.DetectionResult.img:type_name -> google.protobuf.Image
	12, // 5: google.protobuf.DetectionResult.label_boxes:type_name -> google.protobuf.DetectionResult.LabelBoxesEntry
	9,  // 6: google.protobuf.BoundingBoxes.label_boxes:type_name -> google.protobuf.BoundingBox
	8,  // 7: google.protobuf.DetectionResult.LabelBoxesEntry.value:type_name -> google.protobuf.BoundingBoxes
	1,  // 8: google.protobuf.Uploader.UploadImage:input_type -> google.protobuf.Image
	3,  // 9: google.protobuf.EventOnDetect.RegisterEventFilters:input_type -> google.protobuf.Labels
	6,  // 10: google.protobuf.EventOnDetect.SendEvent:input_type -> google.protobuf.Event
	6,  // 11: google.protobuf.EventOnDetect.StreamEvents:input_type -> google.protobuf.Event
	5,  // 12: google.protobuf.EdgeQuery.Find:input_type -> google.protobuf.EventFilter
	5,  // 13: google.protobuf.EdgeQuery.EventStream:input_type -> google.protobuf.EventFilter
	2,  // 14: google.protobuf.Uploader.UploadImage:output_type -> google.protobuf.ImageResponse
	4,  // 15: google.protobuf.EventOnDetect.RegisterEventFilters:output_type -> google.protobuf.EventFilters
	13, // 16: google.protobuf.EventOnDetect.SendEvent:output_type -> google.protobuf.Empty
	13, // 17: google.protobuf.EventOnDetect.StreamEvents:output_type -> google.protobuf.Empty
	6,  // 18: google.protobuf.EdgeQuery.Find:output_type -> google.protobuf.Event
	6,  // 19: google.protobuf.EdgeQuery.EventStream:output_type -> google.protobuf.Event
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_interfaces_proto_init() }
func file_interfaces_proto_init() {
	if File_interfaces_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interfaces_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Labels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingBoxes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interfaces_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_interfaces_proto_goTypes,
		DependencyIndexes: file_interfaces_proto_depIdxs,
		EnumInfos:         file_interfaces_proto_enumTypes,
		MessageInfos:      file_interfaces_proto_msgTypes,
	}.Build()
	File_interfaces_proto = out.File
	file_interfaces_proto_rawDesc = nil
	file_interfaces_proto_goTypes = nil
	file_interfaces_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UploaderClient is the client API for Uploader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploaderClient interface {
	// A client-to-server streaming RPC.
	//
	// Streams image frames from the data source in the client to the server
	// in the edge.
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadImageClient, error)
}

type uploaderClient struct {
	cc grpc.ClientConnInterface
}

func NewUploaderClient(cc grpc.ClientConnInterface) UploaderClient {
	return &uploaderClient{cc}
}

func (c *uploaderClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Uploader_serviceDesc.Streams[0], "/google.protobuf.Uploader/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploaderUploadImageClient{stream}
	return x, nil
}

type Uploader_UploadImageClient interface {
	Send(*Image) error
	CloseAndRecv() (*ImageResponse, error)
	grpc.ClientStream
}

type uploaderUploadImageClient struct {
	grpc.ClientStream
}

func (x *uploaderUploadImageClient) Send(m *Image) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploaderUploadImageClient) CloseAndRecv() (*ImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploaderServer is the server API for Uploader service.
type UploaderServer interface {
	// A client-to-server streaming RPC.
	//
	// Streams image frames from the data source in the client to the server
	// in the edge.
	UploadImage(Uploader_UploadImageServer) error
}

// UnimplementedUploaderServer can be embedded to have forward compatible implementations.
type UnimplementedUploaderServer struct {
}

func (*UnimplementedUploaderServer) UploadImage(Uploader_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}

func RegisterUploaderServer(s *grpc.Server, srv UploaderServer) {
	s.RegisterService(&_Uploader_serviceDesc, srv)
}

func _Uploader_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploaderServer).UploadImage(&uploaderUploadImageServer{stream})
}

type Uploader_UploadImageServer interface {
	SendAndClose(*ImageResponse) error
	Recv() (*Image, error)
	grpc.ServerStream
}

type uploaderUploadImageServer struct {
	grpc.ServerStream
}

func (x *uploaderUploadImageServer) SendAndClose(m *ImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploaderUploadImageServer) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Uploader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.protobuf.Uploader",
	HandlerType: (*UploaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _Uploader_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "interfaces.proto",
}

// EventOnDetectClient is the client API for EventOnDetect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventOnDetectClient interface {
	// RegisterEvents is an rpc implemented by the application server that allows
	// the application to create custom events to be detected by the Edge
	RegisterEventFilters(ctx context.Context, in *Labels, opts ...grpc.CallOption) (*EventFilters, error)
	// SendEvent sends the triggered action from the Edge to the Client
	SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*empty.Empty, error)
	// StreamEvents streams Actions from the Edge to the Client
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (EventOnDetect_StreamEventsClient, error)
}

type eventOnDetectClient struct {
	cc grpc.ClientConnInterface
}

func NewEventOnDetectClient(cc grpc.ClientConnInterface) EventOnDetectClient {
	return &eventOnDetectClient{cc}
}

func (c *eventOnDetectClient) RegisterEventFilters(ctx context.Context, in *Labels, opts ...grpc.CallOption) (*EventFilters, error) {
	out := new(EventFilters)
	err := c.cc.Invoke(ctx, "/google.protobuf.EventOnDetect/RegisterEventFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventOnDetectClient) SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.protobuf.EventOnDetect/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventOnDetectClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (EventOnDetect_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventOnDetect_serviceDesc.Streams[0], "/google.protobuf.EventOnDetect/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventOnDetectStreamEventsClient{stream}
	return x, nil
}

type EventOnDetect_StreamEventsClient interface {
	Send(*Event) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type eventOnDetectStreamEventsClient struct {
	grpc.ClientStream
}

func (x *eventOnDetectStreamEventsClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventOnDetectStreamEventsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventOnDetectServer is the server API for EventOnDetect service.
type EventOnDetectServer interface {
	// RegisterEvents is an rpc implemented by the application server that allows
	// the application to create custom events to be detected by the Edge
	RegisterEventFilters(context.Context, *Labels) (*EventFilters, error)
	// SendEvent sends the triggered action from the Edge to the Client
	SendEvent(context.Context, *Event) (*empty.Empty, error)
	// StreamEvents streams Actions from the Edge to the Client
	StreamEvents(EventOnDetect_StreamEventsServer) error
}

// UnimplementedEventOnDetectServer can be embedded to have forward compatible implementations.
type UnimplementedEventOnDetectServer struct {
}

func (*UnimplementedEventOnDetectServer) RegisterEventFilters(context.Context, *Labels) (*EventFilters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEventFilters not implemented")
}
func (*UnimplementedEventOnDetectServer) SendEvent(context.Context, *Event) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (*UnimplementedEventOnDetectServer) StreamEvents(EventOnDetect_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}

func RegisterEventOnDetectServer(s *grpc.Server, srv EventOnDetectServer) {
	s.RegisterService(&_EventOnDetect_serviceDesc, srv)
}

func _EventOnDetect_RegisterEventFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Labels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventOnDetectServer).RegisterEventFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.protobuf.EventOnDetect/RegisterEventFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventOnDetectServer).RegisterEventFilters(ctx, req.(*Labels))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventOnDetect_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventOnDetectServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.protobuf.EventOnDetect/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventOnDetectServer).SendEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventOnDetect_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventOnDetectServer).StreamEvents(&eventOnDetectStreamEventsServer{stream})
}

type EventOnDetect_StreamEventsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type eventOnDetectStreamEventsServer struct {
	grpc.ServerStream
}

func (x *eventOnDetectStreamEventsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventOnDetectStreamEventsServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventOnDetect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.protobuf.EventOnDetect",
	HandlerType: (*EventOnDetectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEventFilters",
			Handler:    _EventOnDetect_RegisterEventFilters_Handler,
		},
		{
			MethodName: "SendEvent",
			Handler:    _EventOnDetect_SendEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _EventOnDetect_StreamEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "interfaces.proto",
}

// EdgeQueryClient is the client API for EdgeQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EdgeQueryClient interface {
	Find(ctx context.Context, in *EventFilter, opts ...grpc.CallOption) (*Event, error)
	EventStream(ctx context.Context, in *EventFilter, opts ...grpc.CallOption) (EdgeQuery_EventStreamClient, error)
}

type edgeQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeQueryClient(cc grpc.ClientConnInterface) EdgeQueryClient {
	return &edgeQueryClient{cc}
}

func (c *edgeQueryClient) Find(ctx context.Context, in *EventFilter, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/google.protobuf.EdgeQuery/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeQueryClient) EventStream(ctx context.Context, in *EventFilter, opts ...grpc.CallOption) (EdgeQuery_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EdgeQuery_serviceDesc.Streams[0], "/google.protobuf.EdgeQuery/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &edgeQueryEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EdgeQuery_EventStreamClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type edgeQueryEventStreamClient struct {
	grpc.ClientStream
}

func (x *edgeQueryEventStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EdgeQueryServer is the server API for EdgeQuery service.
type EdgeQueryServer interface {
	Find(context.Context, *EventFilter) (*Event, error)
	EventStream(*EventFilter, EdgeQuery_EventStreamServer) error
}

// UnimplementedEdgeQueryServer can be embedded to have forward compatible implementations.
type UnimplementedEdgeQueryServer struct {
}

func (*UnimplementedEdgeQueryServer) Find(context.Context, *EventFilter) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (*UnimplementedEdgeQueryServer) EventStream(*EventFilter, EdgeQuery_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}

func RegisterEdgeQueryServer(s *grpc.Server, srv EdgeQueryServer) {
	s.RegisterService(&_EdgeQuery_serviceDesc, srv)
}

func _EdgeQuery_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeQueryServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.protobuf.EdgeQuery/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeQueryServer).Find(ctx, req.(*EventFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeQuery_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EdgeQueryServer).EventStream(m, &edgeQueryEventStreamServer{stream})
}

type EdgeQuery_EventStreamServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type edgeQueryEventStreamServer struct {
	grpc.ServerStream
}

func (x *edgeQueryEventStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _EdgeQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.protobuf.EdgeQuery",
	HandlerType: (*EdgeQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _EdgeQuery_Find_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _EdgeQuery_EventStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interfaces.proto",
}

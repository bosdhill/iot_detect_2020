// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.13.0
// source: interfaces.proto

package interfaces

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Flags enum provides for the bitwise field flags
type EventQueryFilter_Flags int32

const (
	// Dummy flag
	EventQueryFilter_FLAGS_UNSPECIFIED EventQueryFilter_Flags = 0
	// Return only metadata
	EventQueryFilter_METADATA EventQueryFilter_Flags = 1
	// Return bounding boxes
	EventQueryFilter_BOXES EventQueryFilter_Flags = 2
	// Return jpg image
	EventQueryFilter_IMAGE EventQueryFilter_Flags = 4
	// Return annotated jpg image image
	EventQueryFilter_ANNOTATED EventQueryFilter_Flags = 8
	// Return confidence
	EventQueryFilter_CONFIDENCE EventQueryFilter_Flags = 16
	// Return empty results
	EventQueryFilter_EMPTY EventQueryFilter_Flags = 32
)

// Enum value maps for EventQueryFilter_Flags.
var (
	EventQueryFilter_Flags_name = map[int32]string{
		0:  "FLAGS_UNSPECIFIED",
		1:  "METADATA",
		2:  "BOXES",
		4:  "IMAGE",
		8:  "ANNOTATED",
		16: "CONFIDENCE",
		32: "EMPTY",
	}
	EventQueryFilter_Flags_value = map[string]int32{
		"FLAGS_UNSPECIFIED": 0,
		"METADATA":          1,
		"BOXES":             2,
		"IMAGE":             4,
		"ANNOTATED":         8,
		"CONFIDENCE":        16,
		"EMPTY":             32,
	}
)

func (x EventQueryFilter_Flags) Enum() *EventQueryFilter_Flags {
	p := new(EventQueryFilter_Flags)
	*p = x
	return p
}

func (x EventQueryFilter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventQueryFilter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_interfaces_proto_enumTypes[0].Descriptor()
}

func (EventQueryFilter_Flags) Type() protoreflect.EnumType {
	return &file_interfaces_proto_enumTypes[0]
}

func (x EventQueryFilter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventQueryFilter_Flags.Descriptor instead.
func (EventQueryFilter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{10, 0}
}

type UploadImageFramesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *ImageFrame `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UploadImageFramesRequest) Reset() {
	*x = UploadImageFramesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageFramesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageFramesRequest) ProtoMessage() {}

func (x *UploadImageFramesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageFramesRequest.ProtoReflect.Descriptor instead.
func (*UploadImageFramesRequest) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{0}
}

func (x *UploadImageFramesRequest) GetImage() *ImageFrame {
	if x != nil {
		return x.Image
	}
	return nil
}

// Image is a gocv.Mat representation of an image frame
type ImageFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Rows  int32  `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols  int32  `protobuf:"varint,3,opt,name=cols,proto3" json:"cols,omitempty"`
	Type  int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ImageFrame) Reset() {
	*x = ImageFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageFrame) ProtoMessage() {}

func (x *ImageFrame) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageFrame.ProtoReflect.Descriptor instead.
func (*ImageFrame) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{1}
}

func (x *ImageFrame) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ImageFrame) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *ImageFrame) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *ImageFrame) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// UploadImageFramesResponse is a message that has a boolean that tells whether upload was successful
type UploadImageFramesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UploadImageFramesResponse) Reset() {
	*x = UploadImageFramesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageFramesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageFramesResponse) ProtoMessage() {}

func (x *UploadImageFramesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageFramesResponse.ProtoReflect.Descriptor instead.
func (*UploadImageFramesResponse) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{2}
}

func (x *UploadImageFramesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels *Labels `protobuf:"bytes,1,opt,name=labels,proto3" json:"labels,omitempty"`
}

func (x *GetLabelsResponse) Reset() {
	*x = GetLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelsResponse) ProtoMessage() {}

func (x *GetLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelsResponse.ProtoReflect.Descriptor instead.
func (*GetLabelsResponse) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{3}
}

func (x *GetLabelsResponse) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

// RegisterEventQueryFiltersRequest allows the application to register with the Edge
type RegisterEventQueryFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventFilters *EventQueryFilters `protobuf:"bytes,2,opt,name=event_filters,json=eventFilters,proto3" json:"event_filters,omitempty"`
}

func (x *RegisterEventQueryFiltersRequest) Reset() {
	*x = RegisterEventQueryFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterEventQueryFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterEventQueryFiltersRequest) ProtoMessage() {}

func (x *RegisterEventQueryFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterEventQueryFiltersRequest.ProtoReflect.Descriptor instead.
func (*RegisterEventQueryFiltersRequest) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterEventQueryFiltersRequest) GetEventFilters() *EventQueryFilters {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

// RegisterEventQueryFiltersResponse returns the uid assigned to the application, which is used
// in StreamEvents
type RegisterEventQueryFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *RegisterEventQueryFiltersResponse) Reset() {
	*x = RegisterEventQueryFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterEventQueryFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterEventQueryFiltersResponse) ProtoMessage() {}

func (x *RegisterEventQueryFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterEventQueryFiltersResponse.ProtoReflect.Descriptor instead.
func (*RegisterEventQueryFiltersResponse) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterEventQueryFiltersResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetEventsRequest) Reset() {
	*x = GetEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsRequest) ProtoMessage() {}

func (x *GetEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsRequest.ProtoReflect.Descriptor instead.
func (*GetEventsRequest) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{6}
}

func (x *GetEventsRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GetEventsResponse) Reset() {
	*x = GetEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsResponse) ProtoMessage() {}

func (x *GetEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsResponse.ProtoReflect.Descriptor instead.
func (*GetEventsResponse) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{7}
}

func (x *GetEventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

// Labels are the labels detected by the object detection model on the Edge
type Labels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]bool `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Labels) Reset() {
	*x = Labels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Labels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Labels) ProtoMessage() {}

func (x *Labels) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Labels.ProtoReflect.Descriptor instead.
func (*Labels) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{8}
}

func (x *Labels) GetLabels() map[string]bool {
	if x != nil {
		return x.Labels
	}
	return nil
}

// EventFilters is an array of EventFilter
type EventQueryFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventFilters []*EventQueryFilter `protobuf:"bytes,1,rep,name=event_filters,json=eventFilters,proto3" json:"event_filters,omitempty"`
}

func (x *EventQueryFilters) Reset() {
	*x = EventQueryFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventQueryFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventQueryFilters) ProtoMessage() {}

func (x *EventQueryFilters) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventQueryFilters.ProtoReflect.Descriptor instead.
func (*EventQueryFilters) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{9}
}

func (x *EventQueryFilters) GetEventFilters() []*EventQueryFilter {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

// EventFilter is used in both real time event filtration and historic queries. It provides the marshalled bson
// object to be used for real time event filtration and for mongodb in historic queries, as well as flags to determine
// the exact fields to be set and returned.
type EventQueryFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  Used to query detection results within the last n seconds. This is field is ignored in real time event filtration.
	QuerySeconds int64 `protobuf:"varint,1,opt,name=query_seconds,json=querySeconds,proto3" json:"query_seconds,omitempty"`
	// The name of the event, which is used when returning the event to the application. This field is ignored in query
	// event filtration.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// MongoDB bson query
	Filter []byte `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// flags determine the granularity of data returned in an Action
	Flags uint32 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *EventQueryFilter) Reset() {
	*x = EventQueryFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventQueryFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventQueryFilter) ProtoMessage() {}

func (x *EventQueryFilter) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventQueryFilter.ProtoReflect.Descriptor instead.
func (*EventQueryFilter) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{10}
}

func (x *EventQueryFilter) GetQuerySeconds() int64 {
	if x != nil {
		return x.QuerySeconds
	}
	return 0
}

func (x *EventQueryFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventQueryFilter) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EventQueryFilter) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Event message corresponds to the detection of an Event with an EventFilter
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of this event, which is determined by the EventFilter
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Metadata
	DetectionResult *DetectionResult `protobuf:"bytes,2,opt,name=detection_result,json=detectionResult,proto3" json:"detection_result,omitempty"`
	// annotated_img is the img annotated with bounding boxes
	AnnotatedImg []byte `protobuf:"bytes,3,opt,name=annotated_img,json=annotatedImg,proto3" json:"annotated_img,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{11}
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetDetectionResult() *DetectionResult {
	if x != nil {
		return x.DetectionResult
	}
	return nil
}

func (x *Event) GetAnnotatedImg() []byte {
	if x != nil {
		return x.AnnotatedImg
	}
	return nil
}

type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []*Event `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Img      []byte   `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{12}
}

func (x *Events) GetMetadata() []*Event {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Events) GetImg() []byte {
	if x != nil {
		return x.Img
	}
	return nil
}

// DetectionResult represents the result of the object detection model
type DetectionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the result has any objects
	Empty bool `protobuf:"varint,1,opt,name=empty,proto3" json:"empty,omitempty"`
	// The time of detection
	DetectionTime int64 `protobuf:"varint,2,opt,name=detection_time,json=detectionTime,proto3" json:"detection_time,omitempty"`
	// A map of labels to number detected
	LabelNumber map[string]int32 `protobuf:"bytes,3,rep,name=label_number,json=labelNumber,proto3" json:"label_number,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// A list of labels
	Labels []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	// The matrix representation of the image frame
	Img *ImageFrame `protobuf:"bytes,5,opt,name=img,proto3" json:"img,omitempty"`
	// A map from label to its bounding box
	LabelBoxes map[string]*BoundingBoxes `protobuf:"bytes,6,rep,name=label_boxes,json=labelBoxes,proto3" json:"label_boxes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DetectionResult) Reset() {
	*x = DetectionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionResult) ProtoMessage() {}

func (x *DetectionResult) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionResult.ProtoReflect.Descriptor instead.
func (*DetectionResult) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{13}
}

func (x *DetectionResult) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

func (x *DetectionResult) GetDetectionTime() int64 {
	if x != nil {
		return x.DetectionTime
	}
	return 0
}

func (x *DetectionResult) GetLabelNumber() map[string]int32 {
	if x != nil {
		return x.LabelNumber
	}
	return nil
}

func (x *DetectionResult) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DetectionResult) GetImg() *ImageFrame {
	if x != nil {
		return x.Img
	}
	return nil
}

func (x *DetectionResult) GetLabelBoxes() map[string]*BoundingBoxes {
	if x != nil {
		return x.LabelBoxes
	}
	return nil
}

type BoundingBoxes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelBoxes []*BoundingBox `protobuf:"bytes,1,rep,name=label_boxes,json=labelBoxes,proto3" json:"label_boxes,omitempty"`
}

func (x *BoundingBoxes) Reset() {
	*x = BoundingBoxes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingBoxes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBoxes) ProtoMessage() {}

func (x *BoundingBoxes) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBoxes.ProtoReflect.Descriptor instead.
func (*BoundingBoxes) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{14}
}

func (x *BoundingBoxes) GetLabelBoxes() []*BoundingBox {
	if x != nil {
		return x.LabelBoxes
	}
	return nil
}

// BoundingBox message is the representation of the bounding box output by the object detection component as well as its
// confidence
type BoundingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopLeftX     int32   `protobuf:"varint,1,opt,name=top_left_x,json=topLeftX,proto3" json:"top_left_x,omitempty"`
	TopLeftY     int32   `protobuf:"varint,2,opt,name=top_left_y,json=topLeftY,proto3" json:"top_left_y,omitempty"`
	BottomRightX int32   `protobuf:"varint,3,opt,name=bottom_right_x,json=bottomRightX,proto3" json:"bottom_right_x,omitempty"`
	BottomRightY int32   `protobuf:"varint,4,opt,name=bottom_right_y,json=bottomRightY,proto3" json:"bottom_right_y,omitempty"`
	Confidence   float32 `protobuf:"fixed32,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *BoundingBox) Reset() {
	*x = BoundingBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBox) ProtoMessage() {}

func (x *BoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBox.ProtoReflect.Descriptor instead.
func (*BoundingBox) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{15}
}

func (x *BoundingBox) GetTopLeftX() int32 {
	if x != nil {
		return x.TopLeftX
	}
	return 0
}

func (x *BoundingBox) GetTopLeftY() int32 {
	if x != nil {
		return x.TopLeftY
	}
	return 0
}

func (x *BoundingBox) GetBottomRightX() int32 {
	if x != nil {
		return x.BottomRightX
	}
	return 0
}

func (x *BoundingBox) GetBottomRightY() int32 {
	if x != nil {
		return x.BottomRightY
	}
	return 0
}

func (x *BoundingBox) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type FindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventFilter *EventQueryFilter `protobuf:"bytes,1,opt,name=event_filter,json=eventFilter,proto3" json:"event_filter,omitempty"`
}

func (x *FindRequest) Reset() {
	*x = FindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRequest) ProtoMessage() {}

func (x *FindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRequest.ProtoReflect.Descriptor instead.
func (*FindRequest) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{16}
}

func (x *FindRequest) GetEventFilter() *EventQueryFilter {
	if x != nil {
		return x.EventFilter
	}
	return nil
}

type FindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *FindResponse) Reset() {
	*x = FindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindResponse) ProtoMessage() {}

func (x *FindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindResponse.ProtoReflect.Descriptor instead.
func (*FindResponse) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{17}
}

func (x *FindResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type EventStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventFilter *EventQueryFilter `protobuf:"bytes,1,opt,name=event_filter,json=eventFilter,proto3" json:"event_filter,omitempty"`
}

func (x *EventStreamRequest) Reset() {
	*x = EventStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamRequest) ProtoMessage() {}

func (x *EventStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamRequest.ProtoReflect.Descriptor instead.
func (*EventStreamRequest) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{18}
}

func (x *EventStreamRequest) GetEventFilter() *EventQueryFilter {
	if x != nil {
		return x.EventFilter
	}
	return nil
}

type EventStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *EventStreamResponse) Reset() {
	*x = EventStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interfaces_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamResponse) ProtoMessage() {}

func (x *EventStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interfaces_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamResponse.ProtoReflect.Descriptor instead.
func (*EventStreamResponse) Descriptor() ([]byte, []int) {
	return file_interfaces_proto_rawDescGZIP(), []int{19}
}

func (x *EventStreamResponse) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

var File_interfaces_proto protoreflect.FileDescriptor

var file_interfaces_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0x5e, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x35, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x44, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x6b,
	0x0a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x37, 0x0a, 0x21, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xe7, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x6c, 0x0a,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42,
	0x4f, 0x58, 0x45, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x10,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x20, 0x22, 0x8d, 0x01, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x67, 0x22, 0x4e, 0x0a, 0x06, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x22, 0xdd, 0x03, 0x0a, 0x0f,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0c,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x69, 0x6d,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x51, 0x0a, 0x0b, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x0f,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x65, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x0d, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x52,
	0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0b,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x1c, 0x0a, 0x0a, 0x74,
	0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x58, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x70,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x59, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x58, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x59, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x43, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x7a, 0x0a, 0x08, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x32, 0xb9, 0x02, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f,
	0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x32, 0xfc, 0x01, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x49, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x04, 0x46,
	0x69, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x3b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interfaces_proto_rawDescOnce sync.Once
	file_interfaces_proto_rawDescData = file_interfaces_proto_rawDesc
)

func file_interfaces_proto_rawDescGZIP() []byte {
	file_interfaces_proto_rawDescOnce.Do(func() {
		file_interfaces_proto_rawDescData = protoimpl.X.CompressGZIP(file_interfaces_proto_rawDescData)
	})
	return file_interfaces_proto_rawDescData
}

var file_interfaces_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_interfaces_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_interfaces_proto_goTypes = []interface{}{
	(EventQueryFilter_Flags)(0),               // 0: google.protobuf.EventQueryFilter.Flags
	(*UploadImageFramesRequest)(nil),          // 1: google.protobuf.UploadImageFramesRequest
	(*ImageFrame)(nil),                        // 2: google.protobuf.ImageFrame
	(*UploadImageFramesResponse)(nil),         // 3: google.protobuf.UploadImageFramesResponse
	(*GetLabelsResponse)(nil),                 // 4: google.protobuf.GetLabelsResponse
	(*RegisterEventQueryFiltersRequest)(nil),  // 5: google.protobuf.RegisterEventQueryFiltersRequest
	(*RegisterEventQueryFiltersResponse)(nil), // 6: google.protobuf.RegisterEventQueryFiltersResponse
	(*GetEventsRequest)(nil),                  // 7: google.protobuf.GetEventsRequest
	(*GetEventsResponse)(nil),                 // 8: google.protobuf.GetEventsResponse
	(*Labels)(nil),                            // 9: google.protobuf.Labels
	(*EventQueryFilters)(nil),                 // 10: google.protobuf.EventQueryFilters
	(*EventQueryFilter)(nil),                  // 11: google.protobuf.EventQueryFilter
	(*Event)(nil),                             // 12: google.protobuf.Event
	(*Events)(nil),                            // 13: google.protobuf.Events
	(*DetectionResult)(nil),                   // 14: google.protobuf.DetectionResult
	(*BoundingBoxes)(nil),                     // 15: google.protobuf.BoundingBoxes
	(*BoundingBox)(nil),                       // 16: google.protobuf.BoundingBox
	(*FindRequest)(nil),                       // 17: google.protobuf.FindRequest
	(*FindResponse)(nil),                      // 18: google.protobuf.FindResponse
	(*EventStreamRequest)(nil),                // 19: google.protobuf.EventStreamRequest
	(*EventStreamResponse)(nil),               // 20: google.protobuf.EventStreamResponse
	nil,                                       // 21: google.protobuf.Labels.LabelsEntry
	nil,                                       // 22: google.protobuf.DetectionResult.LabelNumberEntry
	nil,                                       // 23: google.protobuf.DetectionResult.LabelBoxesEntry
	(*empty.Empty)(nil),                       // 24: google.protobuf.Empty
}
var file_interfaces_proto_depIdxs = []int32{
	2,  // 0: google.protobuf.UploadImageFramesRequest.image:type_name -> google.protobuf.ImageFrame
	9,  // 1: google.protobuf.GetLabelsResponse.labels:type_name -> google.protobuf.Labels
	10, // 2: google.protobuf.RegisterEventQueryFiltersRequest.event_filters:type_name -> google.protobuf.EventQueryFilters
	12, // 3: google.protobuf.GetEventsResponse.events:type_name -> google.protobuf.Event
	21, // 4: google.protobuf.Labels.labels:type_name -> google.protobuf.Labels.LabelsEntry
	11, // 5: google.protobuf.EventQueryFilters.event_filters:type_name -> google.protobuf.EventQueryFilter
	14, // 6: google.protobuf.Event.detection_result:type_name -> google.protobuf.DetectionResult
	12, // 7: google.protobuf.Events.metadata:type_name -> google.protobuf.Event
	22, // 8: google.protobuf.DetectionResult.label_number:type_name -> google.protobuf.DetectionResult.LabelNumberEntry
	2,  // 9: google.protobuf.DetectionResult.img:type_name -> google.protobuf.ImageFrame
	23, // 10: google.protobuf.DetectionResult.label_boxes:type_name -> google.protobuf.DetectionResult.LabelBoxesEntry
	16, // 11: google.protobuf.BoundingBoxes.label_boxes:type_name -> google.protobuf.BoundingBox
	11, // 12: google.protobuf.FindRequest.event_filter:type_name -> google.protobuf.EventQueryFilter
	12, // 13: google.protobuf.FindResponse.events:type_name -> google.protobuf.Event
	11, // 14: google.protobuf.EventStreamRequest.event_filter:type_name -> google.protobuf.EventQueryFilter
	12, // 15: google.protobuf.EventStreamResponse.event:type_name -> google.protobuf.Event
	15, // 16: google.protobuf.DetectionResult.LabelBoxesEntry.value:type_name -> google.protobuf.BoundingBoxes
	1,  // 17: google.protobuf.Uploader.UploadImageFrames:input_type -> google.protobuf.UploadImageFramesRequest
	24, // 18: google.protobuf.EventOnDetect.GetLabels:input_type -> google.protobuf.Empty
	5,  // 19: google.protobuf.EventOnDetect.RegisterEventQueryFilters:input_type -> google.protobuf.RegisterEventQueryFiltersRequest
	7,  // 20: google.protobuf.EventOnDetect.GetEvents:input_type -> google.protobuf.GetEventsRequest
	24, // 21: google.protobuf.EventQuery.GetLabels:input_type -> google.protobuf.Empty
	17, // 22: google.protobuf.EventQuery.Find:input_type -> google.protobuf.FindRequest
	19, // 23: google.protobuf.EventQuery.EventStream:input_type -> google.protobuf.EventStreamRequest
	3,  // 24: google.protobuf.Uploader.UploadImageFrames:output_type -> google.protobuf.UploadImageFramesResponse
	4,  // 25: google.protobuf.EventOnDetect.GetLabels:output_type -> google.protobuf.GetLabelsResponse
	6,  // 26: google.protobuf.EventOnDetect.RegisterEventQueryFilters:output_type -> google.protobuf.RegisterEventQueryFiltersResponse
	8,  // 27: google.protobuf.EventOnDetect.GetEvents:output_type -> google.protobuf.GetEventsResponse
	4,  // 28: google.protobuf.EventQuery.GetLabels:output_type -> google.protobuf.GetLabelsResponse
	18, // 29: google.protobuf.EventQuery.Find:output_type -> google.protobuf.FindResponse
	20, // 30: google.protobuf.EventQuery.EventStream:output_type -> google.protobuf.EventStreamResponse
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_interfaces_proto_init() }
func file_interfaces_proto_init() {
	if File_interfaces_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interfaces_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageFramesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageFramesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterEventQueryFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterEventQueryFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Labels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventQueryFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventQueryFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingBoxes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interfaces_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interfaces_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_interfaces_proto_goTypes,
		DependencyIndexes: file_interfaces_proto_depIdxs,
		EnumInfos:         file_interfaces_proto_enumTypes,
		MessageInfos:      file_interfaces_proto_msgTypes,
	}.Build()
	File_interfaces_proto = out.File
	file_interfaces_proto_rawDesc = nil
	file_interfaces_proto_goTypes = nil
	file_interfaces_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UploaderClient is the client API for Uploader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploaderClient interface {
	// A client-to-server streaming RPC.
	//
	// Streams image frames from the data source in the client to the server
	// in the edge.
	UploadImageFrames(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadImageFramesClient, error)
}

type uploaderClient struct {
	cc grpc.ClientConnInterface
}

func NewUploaderClient(cc grpc.ClientConnInterface) UploaderClient {
	return &uploaderClient{cc}
}

func (c *uploaderClient) UploadImageFrames(ctx context.Context, opts ...grpc.CallOption) (Uploader_UploadImageFramesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Uploader_serviceDesc.Streams[0], "/google.protobuf.Uploader/UploadImageFrames", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploaderUploadImageFramesClient{stream}
	return x, nil
}

type Uploader_UploadImageFramesClient interface {
	Send(*UploadImageFramesRequest) error
	CloseAndRecv() (*UploadImageFramesResponse, error)
	grpc.ClientStream
}

type uploaderUploadImageFramesClient struct {
	grpc.ClientStream
}

func (x *uploaderUploadImageFramesClient) Send(m *UploadImageFramesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploaderUploadImageFramesClient) CloseAndRecv() (*UploadImageFramesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageFramesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploaderServer is the server API for Uploader service.
type UploaderServer interface {
	// A client-to-server streaming RPC.
	//
	// Streams image frames from the data source in the client to the server
	// in the edge.
	UploadImageFrames(Uploader_UploadImageFramesServer) error
}

// UnimplementedUploaderServer can be embedded to have forward compatible implementations.
type UnimplementedUploaderServer struct {
}

func (*UnimplementedUploaderServer) UploadImageFrames(Uploader_UploadImageFramesServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImageFrames not implemented")
}

func RegisterUploaderServer(s *grpc.Server, srv UploaderServer) {
	s.RegisterService(&_Uploader_serviceDesc, srv)
}

func _Uploader_UploadImageFrames_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploaderServer).UploadImageFrames(&uploaderUploadImageFramesServer{stream})
}

type Uploader_UploadImageFramesServer interface {
	SendAndClose(*UploadImageFramesResponse) error
	Recv() (*UploadImageFramesRequest, error)
	grpc.ServerStream
}

type uploaderUploadImageFramesServer struct {
	grpc.ServerStream
}

func (x *uploaderUploadImageFramesServer) SendAndClose(m *UploadImageFramesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploaderUploadImageFramesServer) Recv() (*UploadImageFramesRequest, error) {
	m := new(UploadImageFramesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Uploader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.protobuf.Uploader",
	HandlerType: (*UploaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImageFrames",
			Handler:       _Uploader_UploadImageFrames_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "interfaces.proto",
}

// EventOnDetectClient is the client API for EventOnDetect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventOnDetectClient interface {
	// GetLabels returns the labels that the Edge can detect
	GetLabels(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLabelsResponse, error)
	// RegisterEventQueryFilters allows the Application to register with the Edge
	RegisterEventQueryFilters(ctx context.Context, in *RegisterEventQueryFiltersRequest, opts ...grpc.CallOption) (*RegisterEventQueryFiltersResponse, error)
	// StreamEvents streams Events from the Edge to the Application
	// server-side streaming RPC where the client sends a request to the server and gets a stream to read a sequence of messages back
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (EventOnDetect_GetEventsClient, error)
}

type eventOnDetectClient struct {
	cc grpc.ClientConnInterface
}

func NewEventOnDetectClient(cc grpc.ClientConnInterface) EventOnDetectClient {
	return &eventOnDetectClient{cc}
}

func (c *eventOnDetectClient) GetLabels(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLabelsResponse, error) {
	out := new(GetLabelsResponse)
	err := c.cc.Invoke(ctx, "/google.protobuf.EventOnDetect/GetLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventOnDetectClient) RegisterEventQueryFilters(ctx context.Context, in *RegisterEventQueryFiltersRequest, opts ...grpc.CallOption) (*RegisterEventQueryFiltersResponse, error) {
	out := new(RegisterEventQueryFiltersResponse)
	err := c.cc.Invoke(ctx, "/google.protobuf.EventOnDetect/RegisterEventQueryFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventOnDetectClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (EventOnDetect_GetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventOnDetect_serviceDesc.Streams[0], "/google.protobuf.EventOnDetect/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventOnDetectGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventOnDetect_GetEventsClient interface {
	Recv() (*GetEventsResponse, error)
	grpc.ClientStream
}

type eventOnDetectGetEventsClient struct {
	grpc.ClientStream
}

func (x *eventOnDetectGetEventsClient) Recv() (*GetEventsResponse, error) {
	m := new(GetEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventOnDetectServer is the server API for EventOnDetect service.
type EventOnDetectServer interface {
	// GetLabels returns the labels that the Edge can detect
	GetLabels(context.Context, *empty.Empty) (*GetLabelsResponse, error)
	// RegisterEventQueryFilters allows the Application to register with the Edge
	RegisterEventQueryFilters(context.Context, *RegisterEventQueryFiltersRequest) (*RegisterEventQueryFiltersResponse, error)
	// StreamEvents streams Events from the Edge to the Application
	// server-side streaming RPC where the client sends a request to the server and gets a stream to read a sequence of messages back
	GetEvents(*GetEventsRequest, EventOnDetect_GetEventsServer) error
}

// UnimplementedEventOnDetectServer can be embedded to have forward compatible implementations.
type UnimplementedEventOnDetectServer struct {
}

func (*UnimplementedEventOnDetectServer) GetLabels(context.Context, *empty.Empty) (*GetLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabels not implemented")
}
func (*UnimplementedEventOnDetectServer) RegisterEventQueryFilters(context.Context, *RegisterEventQueryFiltersRequest) (*RegisterEventQueryFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEventQueryFilters not implemented")
}
func (*UnimplementedEventOnDetectServer) GetEvents(*GetEventsRequest, EventOnDetect_GetEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}

func RegisterEventOnDetectServer(s *grpc.Server, srv EventOnDetectServer) {
	s.RegisterService(&_EventOnDetect_serviceDesc, srv)
}

func _EventOnDetect_GetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventOnDetectServer).GetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.protobuf.EventOnDetect/GetLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventOnDetectServer).GetLabels(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventOnDetect_RegisterEventQueryFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEventQueryFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventOnDetectServer).RegisterEventQueryFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.protobuf.EventOnDetect/RegisterEventQueryFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventOnDetectServer).RegisterEventQueryFilters(ctx, req.(*RegisterEventQueryFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventOnDetect_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventOnDetectServer).GetEvents(m, &eventOnDetectGetEventsServer{stream})
}

type EventOnDetect_GetEventsServer interface {
	Send(*GetEventsResponse) error
	grpc.ServerStream
}

type eventOnDetectGetEventsServer struct {
	grpc.ServerStream
}

func (x *eventOnDetectGetEventsServer) Send(m *GetEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventOnDetect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.protobuf.EventOnDetect",
	HandlerType: (*EventOnDetectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLabels",
			Handler:    _EventOnDetect_GetLabels_Handler,
		},
		{
			MethodName: "RegisterEventQueryFilters",
			Handler:    _EventOnDetect_RegisterEventQueryFilters_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _EventOnDetect_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interfaces.proto",
}

// EventQueryClient is the client API for EventQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventQueryClient interface {
	// GetLabels returns the labels that the Edge can detect
	GetLabels(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLabelsResponse, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
	EventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (EventQuery_EventStreamClient, error)
}

type eventQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewEventQueryClient(cc grpc.ClientConnInterface) EventQueryClient {
	return &eventQueryClient{cc}
}

func (c *eventQueryClient) GetLabels(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLabelsResponse, error) {
	out := new(GetLabelsResponse)
	err := c.cc.Invoke(ctx, "/google.protobuf.EventQuery/GetLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/google.protobuf.EventQuery/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) EventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (EventQuery_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventQuery_serviceDesc.Streams[0], "/google.protobuf.EventQuery/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventQueryEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventQuery_EventStreamClient interface {
	Recv() (*EventStreamResponse, error)
	grpc.ClientStream
}

type eventQueryEventStreamClient struct {
	grpc.ClientStream
}

func (x *eventQueryEventStreamClient) Recv() (*EventStreamResponse, error) {
	m := new(EventStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventQueryServer is the server API for EventQuery service.
type EventQueryServer interface {
	// GetLabels returns the labels that the Edge can detect
	GetLabels(context.Context, *empty.Empty) (*GetLabelsResponse, error)
	Find(context.Context, *FindRequest) (*FindResponse, error)
	EventStream(*EventStreamRequest, EventQuery_EventStreamServer) error
}

// UnimplementedEventQueryServer can be embedded to have forward compatible implementations.
type UnimplementedEventQueryServer struct {
}

func (*UnimplementedEventQueryServer) GetLabels(context.Context, *empty.Empty) (*GetLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabels not implemented")
}
func (*UnimplementedEventQueryServer) Find(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (*UnimplementedEventQueryServer) EventStream(*EventStreamRequest, EventQuery_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}

func RegisterEventQueryServer(s *grpc.Server, srv EventQueryServer) {
	s.RegisterService(&_EventQuery_serviceDesc, srv)
}

func _EventQuery_GetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).GetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.protobuf.EventQuery/GetLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).GetLabels(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.protobuf.EventQuery/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventQueryServer).EventStream(m, &eventQueryEventStreamServer{stream})
}

type EventQuery_EventStreamServer interface {
	Send(*EventStreamResponse) error
	grpc.ServerStream
}

type eventQueryEventStreamServer struct {
	grpc.ServerStream
}

func (x *eventQueryEventStreamServer) Send(m *EventStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.protobuf.EventQuery",
	HandlerType: (*EventQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLabels",
			Handler:    _EventQuery_GetLabels_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _EventQuery_Find_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _EventQuery_EventStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interfaces.proto",
}

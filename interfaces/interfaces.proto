syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";
//import "google/protobuf/timestamp.proto";
option go_package = ".;interfaces";
package google.protobuf;

// Uploader service provides an RPC endpoint on the Edge for the client to upload image frames.
service Uploader {
    // A client-to-server streaming RPC.
    //
    // Streams image frames from the data source in the client to the server
    // in the edge.
    rpc UploadImage(stream Image) returns (ImageResponse) {}
}

// Image is a gocv.Mat representation of an image frame
message Image {
    bytes image = 1;
    int32 rows = 2;
    int32 cols = 3;
    int32 type = 4;
}

// ImageResponse is a message that has a boolean that tells whether upload was successful
message ImageResponse {
    bool success = 1;
}

// EventOnDetect service provides the application an interface for setting the event filters in order for
// the application to receive event notifications in real time
service EventOnDetect {
    // RegisterEvents is an rpc implemented by the application server that allows
    // the application to create custom event filters used to detect Events on the Edge
    rpc RegisterEventFilters (Labels) returns (EventFilters) {}

    // SendEvents sends the detected events from the Edge to the Application
    rpc SendEvents (Events) returns (google.protobuf.Empty) {}

    // StreamEvents streams Actions from the Edge to the Client
    rpc StreamEvents (stream Event) returns (google.protobuf.Empty) {}

    // TODO need to handle batching actions
}

// Labels are the labels detected by the object detection model on the Edge
message Labels {
    map<string, bool> labels = 1;
}

// EventFilters is an array of EventFilter
message EventFilters {
  repeated EventFilter event_filters = 1;
}

// EventFilter is used in both real time event filtration and historic queries. It provides the marshalled bson
// object to be used for real time event filtration and for mongodb in historic queries, as well as flags to determine
// the exact fields to be set and returned.
message EventFilter {
    //  Used to query detection results from the last n seconds. This is field is ignored in real time event filtration.
    int64 seconds = 1;

    // The name of the event, which is used when returning the event to the application. This field is ignored in query
    // event filtration.
    string name = 2;

    // MongoDB bson query
    bytes filter = 3;

    // flags determine the granularity of data returned in an Action
    uint32 flags = 4;

    // Flags enum provides for the bitwise field flags
    enum Flags {
        // Dummy flag
        FLAGS_UNSPECIFIED = 0;

        // Return only metadata
        METADATA = 1;

        // Return bounding boxes
        BOXES = 2;

        // Return jpg image
        IMAGE = 4;

        // Return annotated jpg image image
        ANNOTATED = 8;

        // Return confidence
        CONFIDENCE = 16;
    }
}

message Events {
    repeated Event events = 1;
}

// Event message corresponds to the detection of an Event with an EventFilter
message Event {
    // name of this event, which is determined by the EventFilter
    string name = 1;

    // Metadata
    DetectionResult detection_result = 2;

    // annotated_img is the img annotated with bounding boxes
    bytes annotated_img = 3;
}

// DetectionResult represents the result of the object detection model
message DetectionResult {
    // Whether or not the result has any objects
	bool empty = 1;

	// The time of detection
	int64 detection_time = 2;

	// A map of labels to number detected
	map<string, int32> label_number = 3;

    // A list of labels
    repeated string labels = 4;

	// The matrix representation of the image frame
	Image img = 5;

	// A map from label to its bounding box
	map<string, BoundingBoxes> label_boxes = 6;
}

message BoundingBoxes {
    repeated BoundingBox label_boxes = 1;
}

// BoundingBox message is the representation of the bounding box output by the object detection component as well as its
// confidence
message BoundingBox {
    int32 top_left_x = 1;
    int32 top_left_y = 2;
    int32 bottom_right_x = 3;
    int32 bottom_right_y = 4;
    float confidence = 5;
}

service EdgeQuery {
    rpc Find (EventFilter) returns (Events) {}
    rpc EventStream(EventFilter) returns (stream Event) {}
}


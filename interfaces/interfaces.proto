syntax = "proto3";
import "google/protobuf/empty.proto";
option go_package = ".;interfaces";
package google.protobuf;

// Uploader service serves image frame uploads from the client.
service Uploader {
    // A client-to-server streaming RPC.
    //
    // Streams image frames from the data source in the client to the server
    // in the edge.
    rpc UploadImage(stream Image) returns (ImageResponse) {}
}

// Image is a gocv.Mat representation of an image frame
message Image {
    bytes image = 1;
    int32 rows = 2;
    int32 cols = 3;
    int32 type = 4;
}

// ImageResponse is a message that has a boolean that tells whether upload was
// successful
message ImageResponse {
    bool success = 1;
}

// ActionOnDetect service provides the application an interface for querying
// the Edge for detection results, and creating custom events that are detected
// (or triggered) on the Edge and then handled as an action by the application
service ActionOnDetect {
    // RegisterEvents is an rpc implemented by the application server that allows
    // the application to create custom events to be detected by the Edge
    rpc RegisterEvents(Labels) returns (Events) {}

    // SendAction sends the triggered action from the Edge to the Client
    rpc SendAction(Action) returns (google.protobuf.Empty) {}

    // StreamActions streams Actions from the Edge to the Client
    rpc StreamActions(stream Action) returns (google.protobuf.Empty) {}

    // TODO need to handle batching actions
}

message Labels {
    map<string, bool> labels = 1;
}

// Events is just a wrapper around a list of Event messages
message Events {
    //Key = label
  repeated Event events = 1;
}

// Event message defines the conditions required for an Action to be triggered as well as the granularity of data to be
// wrapped in an Action.
message Event {
    // hash event uid
    uint64 uid = 1;

    // labels present in event
    repeated string labels = 2;

    // label_union is the set of labels used in determining an Event, with the key as the label. For an Event to trigger
    // an Action, all labels in label_union must be present in the frame, and each label's EventConditions must be
    // satisfied.
    map<string, EventConditions> label_events = 3;

    // distance_measure is the distance measure to be used when determining proximity between objects
    DistanceMeasure distance_measure = 4;

    // flags determine the granularity of data returned in an Action
    uint32 flags = 5;

    // Flags enum provides for the bitwise field flags
    enum Flags {
        // Dummy flag
        FLAGS_UNSPECIFIED = 0;

        // Return only metadata
        METADATA = 1;

        // Return bounding boxes
        BOXES = 2;

        // Return jpg image
        IMAGE = 4;

        // Return annotated jpg image image
        ANNOTATED = 8;

        // Return confidence
        CONFIDENCE = 16;

        // Store this result (event object detection result) on the edge
        PERSIST = 32;
    }

    // DistanceMeasure enum defines different distance measures that can be used while measuring object proximity
    enum DistanceMeasure {
        // Dummy distance measure
        DISTANCE_MEASURE_UNSPECIFIED = 0;

        // euclidean distance measure used in proximity detection
        EUCLIDEAN = 1;

        // manhattan distance measure used in proximity detection
        MANHATTAN = 2;
    }
}

// EventSpecification message defines the relationship this label has with other labels in label_union. When there is
// more than 1 label in label_union, the EventSpecification message can be used for more complex queries
message EventConditions {

    // lower bound confidence threshold
    float conf_threshold = 1;

    // quantity of objects with this label
    int32 quantity = 2;

    // bound on quantity required for this label (bitwise flag)
    uint32 quantity_bound = 3;

    // proximity method used for this label to other labels in label_union
    Proximity proximity = 4;

    // QuantityBound enum defines the different bounds on the number of labels
    enum QuantityBound {
        // Dummy flag
        QUANTITY_BOUND_UNSPECIFIED = 0;

        // quantity of objects with label less than threshold
        LESS = 1;

        // quantity of objects with label greater than threshold
        GREATER = 2;

        // quantity of objects with label equal to threshold
        EQUAL = 4;
    }

    // Proximity enum defines which proximity method to use
    enum Proximity {
        // Dummy value
        PROXIMITY_UNSPECIFIED = 0;

        // Apply distance measure to bounding box perimeters
        BOX = 1;

        // Apply distance measure to centers of bounding boxes
        CENTER = 2;
    }
}

// Action message corresponds to the trigger of an Event (similar to DetectionResult)
message Action {
    DetectionResult detection_result = 1;

    // annotated_img is the img annotated with bounding boxes
    bytes annotated_img = 2;
}

// DetectionResult represents the result of the object detection model
message DetectionResult {
    // Whether or not the result has no objects
	bool empty = 1;

	// The time of detection
	int64 detection_time = 2;

	// A bitmap of detected labels
	map<string, int32> labels = 3;

	// The matrix representation of the image frame
	Image img = 4;

	// A map from label to its bounding box
	map<string, BoundingBoxes> label_boxes = 5;
}

message BoundingBoxes {
    repeated BoundingBox label_boxes = 1;
}

// BoundingBox message is the representation of the bounding box output by the object detection component as well as its
// confidence
message BoundingBox {
    int32 top_left_x = 1;
    int32 top_left_y = 2;
    int32 bottom_right_x = 3;
    int32 bottom_right_y = 4;
    float confidence = 5;
}

